// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String           @unique
  password       String?
  profileImage   String?
  isAdmin        Boolean?         @default(false)
  isSuperAdmin   Boolean?         @default(false)
  isPremium      Boolean?         @default(false)
  plan           String?
  paymentDate    DateTime?       
  expiryDate     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Authenticator (2FA) fields
  authenticatorSecret    String?
  authenticatorEnabled   Boolean  @default(false)
  authenticatorBackupCodes String[] // Backup codes for account recovery
  
  PremiumMember  PremiumMember?
  Comments       Comments[]
  kiitsocial     kiitsocial[]
  totalEarned    Int?             @default(0)
  VerifySolution VerifySolution[]
  Review         Review[]
  refrealCode    String?          @unique
  refralAmount   Int?             @default(0)
  referredBy     String?          @db.ObjectId
  securityViolated SecurityViolated[]
  redeemRequest  RedeemRequest[]
  PremiumGiveway PremiumGiveway?
  subjectTopicsSubmission SubjectTopicsSubmission[]
  allowedProfileUpdate Boolean @default(true)
  tickets   Ticket[]
  courseId String[]  @db.ObjectId
  courses  Courses[] @relation(fields: [courseId], references: [id])
  
  // Maintenance Fee Tracking
  maintenanceFeeDue        Int?             @default(0)
  lastMaintenancePayment   DateTime?
  maintenanceFeeHistory    MaintenanceFee[]
}

model PremiumMember {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  whatsappNumber    String
  branch            String
  year              String
  message           String?
  paymentScreenshot String?
  isActive          Boolean? @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique @db.ObjectId
}

model MaintenanceFee {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  amount            Int
  dueDate           DateTime
  paidDate          DateTime?
  status            MaintenanceFeeStatus @default(PENDING)
  paymentId         String?
  orderId           String?
  month             String   // Format: "YYYY-MM"
  year              Int
  isOverdue         Boolean  @default(false)
  overdueDays       Int?     @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum MaintenanceFeeStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// schema.prisma 

model Review {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  rating        Float
  userId        String           @unique @db.ObjectId
  user          User             @relation(fields: [userId], references: [id])
  internalScore Int
  comments      String
  facultyId     String           @db.ObjectId
  faculty       FacultiesDetails @relation(fields: [facultyId], references: [id])
}

// model Teacher {
//   id       String   @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   section  Int[]
//   subject  String
//   likes    String[]
//   dislikes String[]
//   reviews  Review[]
// }

model ElectiveReview {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  rating        Float
  commentedBy   String
  internalScore Int
  comments      String
  teacherId     String   @db.ObjectId
  teacher       Elective @relation(fields: [teacherId], references: [id])
}

model Elective {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  subject  String
  section  Int[]
  likes    String[]
  dislikes String[]
  reviews  ElectiveReview[]
}

model GroupLinks {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  link      String
  createdBy String
}

model Polling {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  respondedUsersList String[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  sections           Section[]
}

model Section {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  sectionNumber Int
  votes         Int     @default(0)
  pollid        String  @db.ObjectId
  poll          Polling @relation(fields: [pollid], references: [id])
}

model ProfessorContacts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FacultiesDetails {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  phone       String?
  email       String?
  description String?
  jobTitle    String?
  moreInfo    String?
  profileUrl  String?
  tagline     String?
  tags        String[]

  likesId    String[] @db.ObjectId
  dislikesId String[] @db.ObjectId

  semesterSectionId String[]           @db.ObjectId
  semesterSection   SemesterSections[] @relation(fields: [semesterSectionId], references: [id])
  subjectId         String[]           @db.ObjectId
  subject           Subject[]          @relation(fields: [subjectId], references: [id])

  reviews Review[]

  isElective Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comments {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String

  isAnonymous  Boolean    @default(true)
  userId       String     @unique @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  kiitsocialId String     @db.ObjectId
  kiitsocial   kiitsocial @relation(fields: [kiitsocialId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id])
}

model kiitsocial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String
  tags        String[]
  image       String?
  eventType   String?
  isApproved  Boolean? @default(false)
  userId      String   @unique @db.ObjectId
  lostPlace   String?
  foundPlace  String?
  lostDate    String?
  foundDate   String?
  githubLink  String?
  projectLink String?

  isAnonymous Boolean  @default(true)
  likes       String[]

  comments  Comments[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
}

type Note {
  id             String  @default(uuid()) // Unique identifier for notes
  name           String
  mimeType       String? @default("application/pdf")
  isDownloadable Boolean @default(false)
  status         String? @default("VERIFIED")
  Notes          String
}

type PYQS {
  id                 String  @default(uuid()) // Unique identifier for PYQS
  name               String
  year               String
  type               String
  status             String?
  solutionUploadedBy String? @db.ObjectId
  QuestionUploadedBy String? @db.ObjectId
  mimeType           String?
  Question           String?
  solution           String?
  nQuestion          String?
  nSolution          String?
  
}

model Subject {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  SUBCODE       String?
  Credit        String?
  description   String?
  folderId      String?
  nFolderId     String?
  notes         Note[]
  pyqs          PYQS[]
  syllabus      String?
  semesterId    String[]           @db.ObjectId
  semester      Semester[]         @relation(fields: [semesterId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  verfySolution VerifySolution[]
  youtubePlaylist YoutubePlaylist[]
  faculty       FacultiesDetails[] @relation(fields: [facultyId], references: [id])
  facultyId     String[]           @db.ObjectId
}

model Branch {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  semesters Semester[]
}

type PYQSVerify {
  id       String // Unique identifier for PYQS
  name     String
  year     String
  type     String
  Question String?
}

model VerifySolution {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  solution       String
  status         String     @default("REVIEW")
  maxAttempts    Int?       @default(2)
  upiId          String
  pyqs           PYQSVerify
  paymentStatus  String?    @default("PENDING")
  rejectedReason String?
  userId         String     @db.ObjectId
  user           User       @relation(fields: [userId], references: [id])
  subjectId      String     @db.ObjectId
  subject        Subject    @relation(fields: [subjectId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

// -------------------------------------------------------------------------------------------------------------
// Submission model for subject topics starts here
//------------------------------------------------------------------------------------------------------------- 

model SubjectTopicsSubmission {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String     @db.ObjectId
  user           User       @relation(fields: [userId], references: [id])
  upiId          String
  status         String     @default("PENDING")
  rejectedReason String?
  submissionLink String
  subjectTopicsId  String @db.ObjectId
  subjectTopics    subjectTopics @relation(fields: [subjectTopicsId], references: [id])
  createdAt DateTime @default(now())
}

model subjectTopics{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  noOfSubmissions Int @default(0)
  subjectSubmissionId String @db.ObjectId
  subjectSubmission SubjectSubmission @relation(fields: [subjectSubmissionId], references: [id])
  subjectTopicSubmission SubjectTopicsSubmission[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model SubjectSubmission{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  totalSubmissions Int @default(0)
  subjectTopics subjectTopics[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// -------------------------------------------------------------------------------------------------------------
// Submission model for subject topics ends here
//------------------------------------------------------------------------------------------------------------- 




// model Faculties{
//   id        String    @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   phone     String?
//   email     String?
//   description String?
//   jobTitle  String?
//   moreInfo  String?
//   profileUrl String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

// }
model Semester {
  id                         String             @id @default(auto()) @map("_id") @db.ObjectId
  number                     Int
  subjectId                  String[]           @db.ObjectId
  subjects                   Subject[]          @relation(fields: [subjectId], references: [id])
  branch                     Branch             @relation(fields: [branchId], references: [id])
  branchId                   String             @unique @db.ObjectId
  semesterSectionId          String[]           @db.ObjectId
  semesterSections           SemesterSections[]
  isFacultyReviewEnabled     Boolean            @default(false)
  isSwappingEnabled          Boolean            @default(false)
  numberOfSectionForSwapping Int                @default(0)
}

model Swapping {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  branch   String
  Semester Int
  alloted  Int
  userId   String @unique @db.ObjectId

  lookingFor         Int[]
  matched            Boolean    @default(false)
  contact            String
  remoteUserId       String?    @db.ObjectId
  remoteUser         Swapping?  @relation("SwappingToSwapping", fields: [remoteUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  editLeft           Int        @default(3)
  createdAt          DateTime   @default(now())
  SwappingToSwapping Swapping[] @relation("SwappingToSwapping")
}

model SemesterSections {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  section    Int
  semesterId String             @db.ObjectId
  semester   Semester           @relation(fields: [semesterId], references: [id])
  facultyId  String[]           @db.ObjectId
  faculty    FacultiesDetails[] @relation(fields: [facultyId], references: [id])
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model RedeemRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  upiId     String
  amount    Int
  status    String   @default("PENDING")
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PremiumGiveway {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  used             Boolean  @default(false)
  allotedCode      String
  isPremiumAlloted Boolean  @default(false)
  userId           String   @unique @db.ObjectId
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Courses {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String[] @db.ObjectId
  subscribers User[]   @relation(fields: [userId], references: [id])
  Topics      Topic[]
  containsCode Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

type Questions {
  id       String @default(uuid()) // Unique identifier for PYQS
  question String
  answer   String
  language String? @default("cpp")
  input    String?
  output   String?
  explanation String?
  code    String?

}

model Topic {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  Questions Questions[]
  courseId  String      @db.ObjectId
  course    Courses     @relation(fields: [courseId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}



model PaymentOrder{
  id String @id @default(auto()) @map("_id") @db.ObjectId
razorpay_payment_id String
razorpay_order_id String
razorpay_signature String
userId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model PaymentOrder_phonepe{
  id String @id @default(auto()) @map("_id") @db.ObjectId
merchantTransactionId String
userId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


type Item{
  id  String @default(uuid())
  title String
  thumbnail String
  videoId String
  duration String
  createdAt DateTime @default(now())
}



model YoutubePlaylist{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  playlistId String
  title String
  noOfVideos Int
  views Int @default(0)
  items Item[]
  subjectId String @db.ObjectId
  subject Subject @relation(fields: [subjectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}





// This is your Prisma schema file for MongoDB
// You can use this schema file to generate your database with Prisma
// To use it, you would need to set up a MongoDB connection and run prisma db push





// model placmentMaterials {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String
//   type      String
//   fileId    String
//   companyId String   @db.ObjectId
//   Company   Company  @relation(fields: [companyId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Company {
//   id                 String              @id @default(auto()) @map("_id") @db.ObjectId
//   companyName        String              @unique
//   companyLogo        String?
//   companyUrl         String?
//   companyDesc        String?
//   placementMaterials placmentMaterials[]

//   placementId String[]     @db.ObjectId
//   Placements  Placements[] @relation(fields: [placementId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Placements {
//   id                 String  @id @default(auto()) @map("_id") @db.ObjectId
//   year               Int? @unique
//   highestPackage     Int?
//   noOfCompnayVisited Int?
//   noOfJobOffered     Int?
//   extraInfo          String?

//   companyId String[]  @db.ObjectId
//   Company   Company[] @relation(fields: [companyId], references: [id])

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }



model Company {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  logo             String
  description      String?
  tagline          String?
  website          String?
  students         Int?               @default(0)
  firstVisit       Int?
  location         String?
  jobDescription   String?
  slug             String            @unique
  yearlyPlacements YearlyPlacement[]
  examPattern      ExamPattern[]
  commonQuestions  CommonQuestion[]  
  placementMaterials   placmentMaterialsCategory[]
  shortlistingInfo ShortlistingInfo?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model YearlyPlacement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  year      String
  iscompleted Boolean  @default(false)
  totalStudentsApplied Int?
  totalStudentsPlaced  Int?
  highestPackage       Int?
  averagePackage       Int?
  lowestPackage        Int?
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String   @db.ObjectId
  placedStudents   PlacedStudent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type ExamPattern {
  id          String   @default(uuid())
  round       String?
  duration    String?
  description String?
  focusArea   String[]
  createdAt   DateTime @default(now())
}


type CommonQuestions{
  id          String   @default(uuid())
  question   String
  answer     String?
}

type CommonQuestion {
  id          String   @default(cuid()) 
  round       String?
  questions   CommonQuestions[]
  createdAt   DateTime @default(now())
}

type ShortlistingInfo {
  id              String    @default(cuid())
  total           Int @default(0)
  shortlisted     Int @default(0)
  criteriaPoints  String[]
  createdAt       DateTime @default(now())
}


model PlacedStudent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  avatar      String?
  designation String?
  department  String?
  batch       String?
  skills      String[]
  package     String?
  linkedin    String?
  github      String?
  portfolio   String?
  testimonial String?
  companyId     String?
  yealrlyPlacementId String @db.ObjectId
  yearlyPlacement    YearlyPlacement @relation(fields: [yealrlyPlacementId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model Student {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   avatar      String
//   designation String?
//   college     String
//   department  String
//   batch       String
//   skills      String[]
//   placementDate DateTime?
//   company     String?
//   package     String?
//   linkedin    String?
//   github      String?
//   portfolio   String?
//   testimonial String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model placmentMaterialsCategory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  category String
  companyId String   @db.ObjectId
  Company   Company  @relation(fields: [companyId], references: [id])
  placementMaterials placmentMaterials[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

type placmentMaterials {
  id        String  @default(uuid()) // Unique identifier for notes
  name      String
  type      String
  fileId    String
  createdAt DateTime @default(now())
}



model SecurityViolated{
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String?   @db.ObjectId
  user     User?     @relation(fields: [userId], references: [id])
  isBlocked Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String
  priority    String
  status      String @default("Open")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  sender      String
  isResolution Boolean @default(false)
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  ticketId    String   @db.ObjectId
  createdAt   DateTime @default(now())
}


// placements

enum CompanyStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum UserRole {
  STUDENT
  ADMIN
  PLACEMENT_OFFICER
}

enum ResourceType {
  PDF
  VIDEO
  LINK
  DOCUMENT
  PRESENTATION
  ARCHIVE
  IMAGE
  OTHER
}

enum ResourceCategory {
  INTERVIEW_PREP
  CODING
  SYSTEM_DESIGN
  BEHAVIORAL
  TECHNICAL
  GENERAL
}

enum StudyMaterialType {
  PDF
  DOC
  PPT
  VIDEO
  OTHER
}

enum StudyMaterialCategory {
  TECHNICAL
  HR
  PRACTICE
  RESEARCH
  BUSINESS
  CASE_STUDY
  DOMAIN
}

// model User {
//   id                    String   @id @default(auto()) @map("_id") @db.ObjectId
//   email                 String   @unique
//   name                  String
//   role                  UserRole @default(STUDENT)
//   branch                String?
//   year                  Int?
//   cgpa                  Float?
//   backlogs              Int      @default(0)
//   phone                 String?
//   avatar                String?
//   password              String
//   isEmailVerified       Boolean  @default(false)
//   emailVerificationToken String?
//   passwordResetToken    String?
//   passwordResetExpires  DateTime?
//   isActive              Boolean  @default(true)
//   createdAt             DateTime @default(now())
//   updatedAt             DateTime @updatedAt

//   // Relations
//   createdRoles          Role[]
//   uploadedResources     Resource[]
//   uploadedStudyMaterials StudyMaterial[]

//   @@map("users")
// }

model PlacementCompany {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  logo            String?
  domain          String
  description     String?
  website         String?
  email           String?
  phone           String?
  location        String?
  foundedYear     String?
  employeeCount   Int?
  status          CompanyStatus @default(ACTIVE)
  isFeatured      Boolean       @default(false)
  tags            String[]
  
  // Embedded fields as JSON
  kiitPlacementData Json?
  selectionProcess   Json?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  companyRoles    Role[]
  companyResources Resource[]
  companyStudyMaterials StudyMaterial[]

  @@map("placement_companies")
}

model Role {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  ctcRange        String
  description     String?
  location        String?
  deadline        String
  requirements    String[]
  eligibility     Json?
  companyId       String   @db.ObjectId
  createdBy       String?  @db.ObjectId
  status          String   @default("ACTIVE")
  applicationCount Int     @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  company  PlacementCompany  @relation(fields: [companyId], references: [id])
  // creator         User?    @relation(fields: [createdBy], references: [id])
  // applications    Application[]

  @@map("roles")
}

model Resource {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  type            ResourceType
  category        ResourceCategory
  url             String?
  filePath        String?
  size            String?
  downloadCount   Int              @default(0)
  isFeatured      Boolean          @default(false)
  tags            String[]
  status          String           @default("ACTIVE")
  uploadedBy      String?          @db.ObjectId
  companyId       String?          @db.ObjectId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  // uploader        User?            @relation(fields: [uploadedBy], references: [id])
  company         PlacementCompany? @relation(fields: [companyId], references: [id])

  @@map("resources")
}

model StudyMaterial {
  id              String                @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String?
  type            StudyMaterialType     @default(PDF)
  category        StudyMaterialCategory @default(TECHNICAL)
  url             String
  size            String?
  downloadCount   Int                   @default(0)
  isFeatured      Boolean               @default(false)
  tags            String[]
  companyId       String                @db.ObjectId
  uploadedBy      String?               @db.ObjectId
  status          String                @default("ACTIVE")
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  company         PlacementCompany   @relation(fields: [companyId], references: [id])
  // uploader        User?                 @relation(fields: [uploadedBy], references: [id])

  @@map("study_materials")
}

// model Application {
//   id              String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId          String   @db.ObjectId
//   roleId          String   @db.ObjectId
//   status          String   @default("PENDING")
//   appliedAt       DateTime @default(now())
//   updatedAt       DateTime @updatedAt

//   // Relations
//   user            User     @relation(fields: [userId], references: [id])
//   role            Role     @relation(fields: [roleId], references: [id])

//   @@unique([userId, roleId])
//   @@map("applications")
// }
enum EventType {
  CAMPUS_DRIVE
  PRE_PLACEMENT_TALK
  ASSESSMENT
  INTERVIEW
  WORKSHOP
}

enum EventMode {
  ON_CAMPUS
  ONLINE
  HYBRID
}
model Event {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  company           String
  date              String
  time              String
  location          String
  type              EventType
  mode              EventMode
  description       String
  eligibleBranches  String[]
  registrationUrl   String?
  maxParticipants   Int?
  registeredCount   Int       @default(0)
  requirements      String[]
  contactInfo       Json?
  documents         Json[]    @default([])
  deadline          String?
  isActive          Boolean   @default(true)
  companyId         String?   @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("events")
}
